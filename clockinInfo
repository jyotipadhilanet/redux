/*This is the Mainly design for employee Clock-ins Information*/
import React, { Component } from 'react';
import { graphql } from 'react-apollo';
import gql from 'graphql-tag';
import { client } from '../../../../src';
import { Loader } from 'semantic-ui-react';
import {allClockIns} from '../ClockInQueries';
import moment from "moment-timezone";
import { find, pick, orderBy, forEach, some, uniqBy } from 'lodash';
import { Table, TableBody, TableRow, TableRowColumn } from 'semantic-ui-react';
import './clockin.scss';
var rp = require('request-promise');


import RefreshIndicator from 'material-ui/RefreshIndicator';
const styleloader = {
  container: {
    position: 'relative',
  },
  refresh: {
    display: 'inline-block',
    position: 'relative',
  },
};
const style = {
  margin: 12,
  float:"right"
};

const style1 = {
  margin: 15,
  paddingRight:40,
  paddingLeft:40

};



class ClockInsComponent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      allClockInfo:[],
      todayShift:[],
      loading: true,
      sortData:[],

      total:23,
      currentCount:4,
      offset:4,
      event_list:[],
      isFetching:false

    }
  }

  componentWillMount(){
    debugger
    this.props.fetchEvents();
    //this.loadInitialContent()

  }
  componentWillReceiveProps(next){
    debugger
    this.setState({
      event_list:next.eventList
    },()=>{this.loadInitialContent()})
  }

  componentDidMount(){
    debugger
    window.addEventListener('scroll', this.loadOnScroll);
  }
  componentWillUnmount(){
    window.removeEventListener('scroll', this.loadOnScroll);
  }

  loadInitialContent=()=>{
    debugger
    console.log('load',this.state.event_list)
    //Get content from server using your preferred method (like AJAX, relay)
    let ary = this.state.event_list && this.state.event_list.slice(0,this.state.offset);
    this.setState({event_list:ary});
  }
  loadOnScroll = (e) =>{
    if(this.state.currentCount == this.state.total) return;
    var el = document.getElementById('content-end');
    var rect = el.getBoundingClientRect();
    var isAtEnd = (
      // rect.top >= 0 &&
      // rect.left >= 0 &&
      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && /*or $(window).height() */
      rect.right <= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */
    );
    if(isAtEnd){
      //User at the end of content. load more content
      if(!this.state.isFetching){

        this.setState({isFetching:true});

        //get content from server
        setTimeout(() => {
          var count = this.state.currentCount + this.state.offset
          if(this.state.currentCount !== this.state.total){
            this.setState({
              isFetching:false,
              currentCount:count,
              event_list: this.props.eventList.slice(0, count)
            },()=>{console.log('state',this.state.event_list)})
          }
        }, 100);
      }
    }
  }





  getClockInsInformation = () => {
    return client.query({
      query: allClockIns,
      variables: { workplaceId: localStorage.getItem('workplaceId') }
    }).then((res) => {
      if (res.data) {
        console.log("data come here",res.data)
        this.setState({ loading: false, allClockInfo:res.data.allShifts.edges},()=>{
          console.log("All info",this.state.allClockInfo)
          // allClockInfo:orderBy(res.data.allShifts.edges,(shift) => moment(shift.node.startTime.toString()).format('ha'), ['asc'])
          // var sortedData = orderBy(this.state.allClockInfo,
          //   (shift) => moment(shift.node.startTime.toString()).format('ha'), ['asc']);
        });
        return res.data
      }
    }).catch(err => console.log('An error occurred, err: ', err));
  };

  componentWillMount() {
    console.log("componentWillMount called..")
    this.getClockInsInformation()
  }

  componentWillReceiveProps(nextProps){
    // this.setState({allClockInfo:nextProps})
    // console.log("In clock ins Information",nextProps);
    // this.getClockInsInformation()
  }

  // filterTodayShift = () => {
  //   const { allShifts, shift } = this.props;
  //   const todayShift = [];
  //   forEach(allShifts, function(shiftData, key) {
  //     if(moment(shift.startTime).isBetween(shiftData.node.startTime,shiftData.node.endTime,'day',[])){
  //       todayShift.push(shiftData);
  //     }
  //   });
  //   this.setState({todayShift: todayShift});
  // }

  render() {
    console.log("workplaceId",localStorage.getItem('workplaceId'))
    if (this.state.allClockInfo && this.state.loading) {
      return (
        <div style={{marginTop:"1%",marginLeft:"0"}}>
          <Loader active inline='centered' />
        </div>)
    }
    if (this.state.allClockInfo){
      return (
        <Table className="tab-cos" singleLine compact size="small">
          <Table.Body>
            {this.state.allClockInfo.map((info)=> {
              return (
                <Table.Row>
                  <Table.Cell>
                    <Table>
                      <Table.Header>
                        <Table.Row>
                          <Table.HeaderCell>{moment(info.node.startTime.toString()).format('ha')+" - "+moment(info.node.endTime.toString()).format('ha')+"  "+moment(info.node.startTime.toString()).format('MMMM  DD')+"   "+"   "+info.node.workplaceByWorkplaceId.workplaceName} </Table.HeaderCell>
                        </Table.Row>
                      </Table.Header>
                      <Table.Body>
                        {info.node.marketsByShiftId.edges.map((marketinfo)=> {
                          return (
                            <Table.Row>
                              <Table.Cell>
                                {`${marketinfo.node.userByWorkerId.firstName} ${marketinfo.node.userByWorkerId.lastName}, CLOCKED IN`}
                                {(true)?"ON TIME":"LATE"}{"FROM"}
                                {(true)?"CORRECT IN ":"INCORRECT "}
                                {<a href={"https://goo.gl/maps/iX5b61ZiSr72"} target="_newtab">marketinfo.node.clockInLocation</a>}
                                {" , "}
                                {"CLOCKED OUT"}
                                {(true)?"ON TIME":"LATE"}{"FROM"}
                                {(true)?"CORRECT IN ":"INCORRECT "}
                                {<a href={"https://goo.gl/maps/iX5b61ZiSr72"} target="_newtab">marketinfo.node.clockOutLocation</a>}
                              </Table.Cell>
                            </Table.Row>
                          )})}
                      </Table.Body>
                    </Table>
                  </Table.Cell>
                </Table.Row>
              )})}
          </Table.Body>
        </Table>
      )
    }
    {
      (this.state.currentCount !== this.state.total)?

        <center><RefreshIndicator
          id="content-end"
          size={70}
          left={10}
          top={0}
          status="loading"
          style={styleloader.refresh}
          onClick={e => this.forceLoadOnScroll()}
        /></center>:null

    }

  }
}
const ClockIns = graphql(allClockIns,{
    options: () => ({
      variables: { workplaceId: localStorage.getItem('workplaceId') }
    }),
    fetchPolicy: 'network-only',
    name: 'allClockIns'
  }
)(ClockInsComponent);
export default ClockIns;
